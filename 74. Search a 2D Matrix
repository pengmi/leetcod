class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        bool ret=false;
        


        int row=matrix.size()-1;
        if(row<0)
        {
            return ret;
        }
        int col=matrix[0].size()-1;
        if(col<0)
        {
            return ret;
        }
        
        if(target<matrix[0][0])
        {
            return ret;
        }
        if(target>matrix[row][col])
        {
            return ret;
        }
        
        for(int i=0;i<=row;++i)
        {
            if(target<matrix[i][col])
            {
                ret=binarySearch(matrix[i],target);
                break;
            }
            else if(target==matrix[i][col])
            {
                return true;
            }
            else
                continue;
        }
        
        
        return ret;
    }
    bool binarySearch(const vector<int>& vec,int target)
    {
        if(vec.size()==0)
        {
            return false;
        }
        bool ret=false;
        for(int b=0,e=vec.size();b<e;)
        {
            int pos=(b+e)/2;
            if(vec[pos]==target)
            {
                ret=true;
                break;
            }
            else if(vec[pos]>target)
            {
                e=pos;
            }
            else
            {
                b=pos+1;
            }
        }
        
        return ret;
    }
};
