/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(!lists.size())
        {
            return NULL;
        }
        auto ret=lists[0];
        
        for(int i=1;i<lists.size();++i)
        {
            ret=mergeTwoLists(ret,lists[i]);
        }
        return ret;
    }
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        
        if(!l1&&!l2)
        {
            return NULL;
        }
        else if(!l1)
            return l2;
        else if(!l2)
            return l1;
        
        auto left=l1;
        auto right=l2;
        
        if(left->val>right->val)
        {
            swap(left,right);
        }
        auto ret=left;
        auto front=left;
        auto end=left;
        
        while(right)
        {
            while(end&&end->val<=right->val)
            {
                front=end;
                end=end->next;
            }
            
            if(end==NULL)
            {
                front->next=right;
                break;
            }
            else
            {
                front->next=right;
                right=right->next;
                front->next->next=end;
                front=front->next;
            }
            
        }
        return ret;
    }
};
